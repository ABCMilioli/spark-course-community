# Script de Teste - Gateways de Pagamento em Produ√ß√£o
# PowerShell para Windows

Write-Host "üöÄ Testando Gateways de Pagamento em Produ√ß√£o" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

# Configura√ß√µes
$BASE_URL = $env:APP_URL
if (-not $BASE_URL) {
    $BASE_URL = Read-Host "Digite a URL da aplica√ß√£o (ex: https://seu-dominio.com)"
}

Write-Host "üîç Testando: $BASE_URL" -ForegroundColor Yellow

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Test-Endpoint {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = "",
        [string]$Description
    )
    
    Write-Host "üìç $Description..." -ForegroundColor Cyan
    
    try {
        if ($Method -eq "GET") {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -ErrorAction Stop
        } else {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -Body $Body -ContentType "application/json" -ErrorAction Stop
        }
        
        Write-Host "   ‚úÖ SUCESSO" -ForegroundColor Green
        return $response
    } catch {
        Write-Host "   ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# 1. Testar conectividade b√°sica
Write-Host "`nüåê 1. Testando Conectividade B√°sica" -ForegroundColor Blue
Write-Host "------------------------------------" -ForegroundColor Blue

$healthCheck = Test-Endpoint -Url "$BASE_URL/api/health" -Description "Health check da API"
if (-not $healthCheck) {
    Write-Host "‚ùå API n√£o est√° respondendo. Verifique se o servi√ßo est√° ativo." -ForegroundColor Red
    exit 1
}

# 2. Testar endpoints de pagamento (sem autentica√ß√£o)
Write-Host "`nüí≥ 2. Testando Endpoints de Pagamento" -ForegroundColor Blue
Write-Host "-------------------------------------" -ForegroundColor Blue

$methods = Test-Endpoint -Url "$BASE_URL/api/payments/methods" -Description "M√©todos de pagamento dispon√≠veis"

if ($methods) {
    Write-Host "   üìã M√©todos encontrados:" -ForegroundColor Yellow
    foreach ($method in $methods) {
        $status = if ($method.enabled) { "‚úÖ ATIVO" } else { "‚ùå INATIVO" }
        Write-Host "      - $($method.name): $status" -ForegroundColor White
    }
}

# 3. Testar configura√ß√£o do Stripe
Write-Host "`nüíé 3. Testando Configura√ß√£o do Stripe" -ForegroundColor Blue
Write-Host "-------------------------------------" -ForegroundColor Blue

# Verificar se as vari√°veis est√£o configuradas
$stripeKey = $env:STRIPE_SECRET_KEY
$stripeWebhook = $env:STRIPE_WEBHOOK_SECRET

if ($stripeKey) {
    if ($stripeKey.StartsWith("sk_live_")) {
        Write-Host "   ‚úÖ Stripe configurado para PRODU√á√ÉO" -ForegroundColor Green
    } elseif ($stripeKey.StartsWith("sk_test_")) {
        Write-Host "   ‚ö†Ô∏è  Stripe configurado para TESTE" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚ùå Chave Stripe inv√°lida" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚ùå STRIPE_SECRET_KEY n√£o configurado" -ForegroundColor Red
}

if ($stripeWebhook) {
    Write-Host "   ‚úÖ Webhook secret configurado" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  STRIPE_WEBHOOK_SECRET n√£o configurado" -ForegroundColor Yellow
}

# 4. Testar configura√ß√£o do Mercado Pago
Write-Host "`nüõí 4. Testando Configura√ß√£o do Mercado Pago" -ForegroundColor Blue
Write-Host "-------------------------------------------" -ForegroundColor Blue

$mpToken = $env:MERCADOPAGO_ACCESS_TOKEN

if ($mpToken) {
    if ($mpToken.StartsWith("APP_USR-")) {
        Write-Host "   ‚úÖ Mercado Pago configurado para PRODU√á√ÉO" -ForegroundColor Green
        
        # Testar API do Mercado Pago
        try {
            $headers = @{ "Authorization" = "Bearer $mpToken" }
            $mpTest = Invoke-RestMethod -Uri "https://api.mercadopago.com/v1/payment_methods" -Headers $headers -ErrorAction Stop
            Write-Host "   ‚úÖ API do Mercado Pago respondendo" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Erro na API do Mercado Pago: $($_.Exception.Message)" -ForegroundColor Red
        }
        
    } elseif ($mpToken.StartsWith("TEST-")) {
        Write-Host "   ‚ö†Ô∏è  Mercado Pago configurado para TESTE" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚ùå Token Mercado Pago inv√°lido" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚ö†Ô∏è  MERCADOPAGO_ACCESS_TOKEN n√£o configurado" -ForegroundColor Yellow
    Write-Host "      Mercado Pago ser√° desabilitado" -ForegroundColor Gray
}

# 5. Testar webhooks (se poss√≠vel)
Write-Host "`nüîó 5. Testando Webhooks" -ForegroundColor Blue
Write-Host "------------------------" -ForegroundColor Blue

# Testar webhook Stripe (simula√ß√£o)
$stripeWebhookTest = Test-Endpoint -Url "$BASE_URL/api/webhooks/stripe" -Method "POST" -Description "Webhook Stripe (teste de conectividade)"
if ($stripeWebhookTest) {
    Write-Host "   ‚úÖ Endpoint do webhook Stripe acess√≠vel" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Endpoint do webhook Stripe com problemas (normal se sem assinatura)" -ForegroundColor Yellow
}

# Testar webhook Mercado Pago (simula√ß√£o)  
$mpWebhookTest = Test-Endpoint -Url "$BASE_URL/api/webhooks/mercadopago" -Method "POST" -Description "Webhook Mercado Pago (teste de conectividade)"

# 6. Verificar banco de dados
Write-Host "`nüóÑÔ∏è 6. Verificando Banco de Dados" -ForegroundColor Blue
Write-Host "--------------------------------" -ForegroundColor Blue

# Testar endpoint que usa o banco
$dbTest = Test-Endpoint -Url "$BASE_URL/api/payments/stats" -Description "Conectividade com banco de dados (endpoint stats)"

if ($dbTest) {
    Write-Host "   ‚úÖ Banco de dados respondendo" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Problema com banco de dados ou permiss√µes" -ForegroundColor Red
}

# 7. Testar HTTPS e certificado
Write-Host "`nüîí 7. Verificando HTTPS" -ForegroundColor Blue
Write-Host "----------------------" -ForegroundColor Blue

if ($BASE_URL.StartsWith("https://")) {
    Write-Host "   ‚úÖ HTTPS configurado" -ForegroundColor Green
    
    # Testar certificado SSL
    try {
        $uri = [System.Uri]$BASE_URL
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $tcpClient.Connect($uri.Host, 443)
        $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream())
        $sslStream.AuthenticateAsClient($uri.Host)
        $cert = $sslStream.RemoteCertificate
        $tcpClient.Close()
        
        Write-Host "   ‚úÖ Certificado SSL v√°lido" -ForegroundColor Green
        Write-Host "      Expira em: $($cert.NotAfter)" -ForegroundColor Gray
    } catch {
        Write-Host "   ‚ö†Ô∏è  Problema com certificado SSL: $($_.Exception.Message)" -ForegroundColor Yellow
    }
} else {
    Write-Host "   ‚ùå HTTPS N√ÉO configurado - OBRIGAT√ìRIO para produ√ß√£o!" -ForegroundColor Red
}

# 8. Resumo dos testes
Write-Host "`nüìä 8. Resumo dos Testes" -ForegroundColor Blue
Write-Host "------------------------" -ForegroundColor Blue

$summary = @"
Resumo da Configura√ß√£o:

üåê URL Base: $BASE_URL
üíé Stripe: $(if ($stripeKey) { if ($stripeKey.StartsWith("sk_live_")) { "‚úÖ PRODU√á√ÉO" } else { "‚ö†Ô∏è TESTE" } } else { "‚ùå N√ÉO CONFIGURADO" })
üõí Mercado Pago: $(if ($mpToken) { if ($mpToken.StartsWith("APP_USR-")) { "‚úÖ PRODU√á√ÉO" } else { "‚ö†Ô∏è TESTE" } } else { "‚ùå N√ÉO CONFIGURADO" })
üóÑÔ∏è Banco de Dados: $(if ($dbTest) { "‚úÖ FUNCIONANDO" } else { "‚ùå PROBLEMA" })
üîí HTTPS: $(if ($BASE_URL.StartsWith("https://")) { "‚úÖ ATIVO" } else { "‚ùå N√ÉO CONFIGURADO" })

"@

Write-Host $summary -ForegroundColor White

# 9. Pr√≥ximos passos
Write-Host "`nüéØ 9. Pr√≥ximos Passos" -ForegroundColor Blue
Write-Host "---------------------" -ForegroundColor Blue

if ($BASE_URL.StartsWith("https://") -and $stripeKey -and $stripeKey.StartsWith("sk_live_")) {
    Write-Host "‚úÖ Sistema pronto para PRODU√á√ÉO!" -ForegroundColor Green
    Write-Host ""
    Write-Host "Acesse o dashboard de pagamentos em:" -ForegroundColor Yellow
    Write-Host "$BASE_URL/admin/payments" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Para testar pagamentos reais:" -ForegroundColor Yellow
    Write-Host "1. Crie um curso com valor baixo (R$ 1,00)" -ForegroundColor White
    Write-Host "2. Teste o fluxo completo de pagamento" -ForegroundColor White
    Write-Host "3. Verifique se os webhooks est√£o funcionando" -ForegroundColor White
} else {
    Write-Host "‚ö†Ô∏è  Sistema ainda N√ÉO est√° pronto para produ√ß√£o!" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Itens a corrigir:" -ForegroundColor Red
    if (-not $BASE_URL.StartsWith("https://")) {
        Write-Host "‚ùå Configure HTTPS com certificado SSL v√°lido" -ForegroundColor Red
    }
    if (-not $stripeKey -or -not $stripeKey.StartsWith("sk_live_")) {
        Write-Host "‚ùå Configure chaves de PRODU√á√ÉO do Stripe" -ForegroundColor Red
    }
    if (-not $dbTest) {
        Write-Host "‚ùå Corrija problemas com o banco de dados" -ForegroundColor Red
    }
}

Write-Host "`nüîß Para mais detalhes, consulte:" -ForegroundColor Blue
Write-Host "README-PAYMENT-PRODUCTION.md" -ForegroundColor Cyan

Write-Host "`nüéâ Teste conclu√≠do!" -ForegroundColor Green 